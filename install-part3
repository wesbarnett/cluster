#!/bin/bash

set -e

password=XXXXX          # default password
users=USER1 USER2 USER3 # users to add
myuser=wes

NOIPUSER=
NOIPPASS=
NOIPDOMAIN=

##########################################

echo "Remind me just one more time: Which type of machine are you installing on?"
select TYPE in master node; do
	if [[ "$REPLY"  = 1 ]]; then
        MASTER=true
		break
	elif [[ "$REPLY"  = 2 ]]; then
		MASTER=false
		break
	fi
done

# Install some things we need
pacman -q -S --noconfirm vim openssh cmake git mlocate zsh screen xorg-server fftw xorg-xauth pkgfile

# Update locate database
updatedb

# Update pkgfile database
pkgfile --update

# Allow all users in wheel group to shutdown system, mount drives, and kill process
# Admin users can do the above, plus systemd, pacman, and firewall

echo "Enabling wheel group in sudoers..."
cat -> /etc/sudoers <<SUDOFILE
## sudoers file.
##
## This file MUST be edited with the 'visudo' command as root.
## Failure to use 'visudo' may result in syntax or file permission errors
## that prevent sudo from running.
##
## See the sudoers man page for the details on how to write a sudoers file.
##

Cmnd_Alias  POWER    = /sbin/halt, /sbin/reboot, /sbin/poweroff, /usr/bin/shutdown
Cmnd_Alias  KILL     = /usr/bin/kill, /usr/bin/killall
Cmnd_Alias  STORAGE  = /usr/bin/mount, /usr/bin/umount
Cmnd_Alias  SYSTEMD  = /usr/bin/journalctl, /usr/bin/systemctl
Cmnd_Alias  PKGMAN   = /usr/bin/pacman, /usr/bin/pkgfile
Cmnd_Alias  FIREWALL = /usr/bin/iptables, /usr/bin/ip6tables
Cmnd_Alias  USERS    = /usr/bin/useradd, /usr/bin/usermod, /usr/bin/groupadd, /user/bin/groupdel

root ALL=(ALL) ALL
%admin ALL=(root) POWER, STORAGE, KILL, SYSTEMD, PKGMAN, FIREWALL, USERS
%wheel ALL=(root) POWER, STORAGE, KILL
## (the '#' here does not indicate a comment)
#includedir /etc/sudoers.d
SUDOFILE

echo "Changing root shell to zsh..."
chsh -s /usr/bin/zsh

echo "Adding personal user..."
useradd -m -G wheel -s /bin/zsh $myuser
groupadd admin
usermod -aG admin $myuser
echo "Enter your user password..."
passwd $myuser

# Add users and configure them
echo "Adding other users..."

for user in $users; do
    echo "Adding $user..."
	useradd -m -G wheel -s /bin/bash $user
	mkdir /data/$user
	chown -R $user:$user /data/$user
	echo $user:$password | chpasswd
	chage -d 0 $user
done

#/bin/bash
echo "Setting up firewall and sshguard..."
pacman -q -S --noconfirm iptables sshguard

if [ "$MASTER" = true ]; then

echo "net.ipv4.ip_forward=1" >> /etc/systctl.d/99-sysctl.conf

echo "IPTABLES_FORWARD=1" >> /etc/conf.d/iptables

cat - > /etc/iptables/iptables.rules <<RULES
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
:sshguard - [0:0]
-A INPUT -m comment --comment "000 accept established traffic" -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -m comment --comment "001 accept loopback device" -j ACCEPT
-A INPUT -i eno1 -m comment --comment "002 accept traffic on trusted eno1 (within cluster)" -j ACCEPT
-A INPUT -m comment --comment "003 drop traffic with invalid headers or checksums" -m conntrack --ctstate INVALID -j DROP
-A INPUT -p icmp -m comment --comment "004 accept all echo requests" -m conntrack --ctstate NEW -m icmp --icmp-type 8 -j ACCEPT
-A INPUT -p tcp -m comment --comment "005 send ssh traffic to sshguard" -j sshguard
-A INPUT -p tcp -m multiport --dports 22 -m comment --comment "006 accept ssh traffic" -j ACCEPT
-A INPUT -p udp -m comment --comment "007 if port is not open, reject" -j REJECT --reject-with icmp-port-unreachable
-A INPUT -p tcp -m comment --comment "008 reject tcp-reset packets" -j REJECT --reject-with tcp-reset
-A INPUT -m comment --comment "009 reject all other traffic with unreachable message" -j REJECT --reject-with icmp-proto-unreachable
-A INPUT -m comment --comment "998 drop all INPUT by default" -j DROP
-A FORWARD -m comment --comment "010 established forwarded traffic is allowed" -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -p icmp -m comment --comment "011 accept all forwared icmp traffic" -j ACCEPT
-A FORWARD -i lo -m comment --comment "012 accept all forwarded loopback traffic" -j ACCEPT
-A FORWARD -i eno1 -o enp3s2 -m comment --comment "013 accept all traffic from cluster to outside" -j ACCEPT
-A FORWARD -m comment --comment "014 reject all traffic with unreachable message" -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -m comment --comment "999 drop all FORWARD by default" -j DROP
COMMIT
*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
-A POSTROUTING -s 192.168.0.0/24 -o enp3s2 -m comment --comment "015 masquerade all cluster traffic as coming from master" -j MASQUERADE
COMMIT
RULES

touch /etc/iptables/ip6tables.rules
systemctl start iptables.service
systemctl enable iptables.service
systemctl start sshguard.service
systemctl enable sshguard.service


echo "Setting up ssh..."
cat - > /etc/ssh/sshd_config <<SSHCONFIG
#	$OpenBSD: sshd_config,v 1.94 2015/02/02 01:57:44 deraadt Exp $

# This is the sshd server system-wide configuration file.  See
# sshd_config(5) for more information.

# This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options override the
# default value.

#Port 22
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::

# The default requires explicit activation of protocol 1
Protocol 2

# HostKey for protocol version 1
#HostKey /etc/ssh/ssh_host_key
# HostKeys for protocol version 2
#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_dsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key

# Lifetime and size of ephemeral version 1 server key
#KeyRegenerationInterval 1h
#ServerKeyBits 1024

# Ciphers and keying
#RekeyLimit default none

# Logging
# obsoletes QuietMode and FascistLogging
#SyslogFacility AUTH
#LogLevel INFO

# Authentication:

LoginGraceTime 30s
PermitRootLogin no
#StrictModes yes
#MaxAuthTries 6
#MaxSessions 10

#RSAAuthentication yes
#PubkeyAuthentication yes

# The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
# but this is overridden so installations will only check .ssh/authorized_keys
AuthorizedKeysFile	.ssh/authorized_keys

#AuthorizedPrincipalsFile none

#AuthorizedKeysCommand none
#AuthorizedKeysCommandUser nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
#RhostsRSAAuthentication no
# similar for protocol version 2
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# RhostsRSAAuthentication and HostbasedAuthentication
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
#IgnoreRhosts yes

# To disable tunneled clear text passwords, change to no here!
#PasswordAuthentication yes
#PermitEmptyPasswords no

# Change to no to disable s/key passwords
ChallengeResponseAuthentication no

# Kerberos options
#KerberosAuthentication no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes
#KerberosGetAFSToken no

# GSSAPI options
#GSSAPIAuthentication no
#GSSAPICleanupCredentials yes

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
# the setting of "PermitRootLogin without-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to 'no'.
UsePAM yes

#AllowAgentForwarding yes
AllowTcpForwarding yes
#GatewayPorts no
X11Forwarding yes
X11DisplayOffset 10
X11UseLocalhost yes
#PermitTTY yes
PrintMotd no # pam does that
#PrintLastLog yes
#TCPKeepAlive yes
#UseLogin no
UsePrivilegeSeparation sandbox		# Default for new installations.
#PermitUserEnvironment no
#Compression delayed
#ClientAliveInterval 0
#ClientAliveCountMax 3
#UseDNS no
#PidFile /run/sshd.pid
#MaxStartups 10:30:100
#PermitTunnel no
#ChrootDirectory none
#VersionAddendum none

Banner /etc/issue.net

# override default of no subsystems
Subsystem	sftp	/usr/lib/ssh/sftp-server

SSHCONFIG

else

cat - > /etc/ssh/sshd_config <<SSHCONFIG
#	$OpenBSD: sshd_config,v 1.94 2015/02/02 01:57:44 deraadt Exp $

# This is the sshd server system-wide configuration file.  See
# sshd_config(5) for more information.

# This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options override the
# default value.

#Port 22
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::

# The default requires explicit activation of protocol 1
#Protocol 2

# HostKey for protocol version 1
#HostKey /etc/ssh/ssh_host_key
# HostKeys for protocol version 2
#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_dsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key

# Lifetime and size of ephemeral version 1 server key
#KeyRegenerationInterval 1h
#ServerKeyBits 1024

# Ciphers and keying
#RekeyLimit default none

# Logging
# obsoletes QuietMode and FascistLogging
#SyslogFacility AUTH
#LogLevel INFO

# Authentication:

#LoginGraceTime 2m
#PermitRootLogin yes
#StrictModes yes
#MaxAuthTries 6
#MaxSessions 10

#RSAAuthentication yes
#PubkeyAuthentication yes
SSHCONFIG

fi

# Enable ssh
systemctl enable sshd

# Add domain name server caching on the master node
if [ "$MASTER" = true ]; then
echo "Setting up DNS cache server..."
pacman -S -q --no-confirm pdnsd
cat - > /etc/pdnsd.conf <<DNSCONFIG
global {
	perm_cache=1024;
	cache_dir="/var/cache/pdnsd";
	run_as="pdnsd";
	server_ip = 192.168.0.1;
	status_ctl = on;
	query_method=udp_tcp;
	min_ttl=15m;
	max_ttl=1w;
	timeout=10;
	neg_domain_pol=on;
	udpbufsize=1024;
}

server {
	label= "Google DNS";
	ip = 8.8.8.8, 8.8.4.4;
	timeout=4;
	uptest=if;
	interface=enp3s2;
	interval=10m;
	purge_cache=off;
	edns_query=yes;
}

source {
	owner=localhost;
	file="/etc/hosts";
}


rr {
	name=localhost;
	reverse=on;
	a=127.0.0.1;
	owner=localhost;
	soa=localhost,root.localhost,42,86400,900,86400,86400;
}
DNSCONFIG

rm /etc/resolv.conf
ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf

else

echo "Pointing to master node for DNS..."

rm /etc/resolv.conf
echo "nameserver 192.168.0.1 > /etc/resolv.conf"

fi

systemctl restart systemd-networkd
systemctl restart systemd-resolved

# Sync time
timedatectl set-ntp true 

# Update microcode
echo "Getting updated Intel microcode..."
pacman -S intel-ucode
grub-mkconfig -o /boot/grub/grub.cfg

# Add automatic timeout for virtual consoles (not terminal emulators)
cat -> /etc/profile.d/shell-timeout.sh <<TMOUTSETUP
TMOUT="\$(( 60*10 ))";
[ -z "\$DISPLAY" ] && export TMOUT;
case \$( /usr/bin/tty ) in
        /dev/tty[0-9]*) export TMOUT;;
esac
TMOUTSETUP

pacman -S --no-confirm -q ddclient

echo "Setting up ddclient..."
cat -> /etc/ddclient/ddclient.conf <<DDCLIENTCONF
daemon=300
syslog=yes
mail=root
mail-failure=root
pid=/var/run/ddclient.pid
ssl=yes
use=web, web=checkip.dyndns.org/, web-skip='IP Address'
protocol=dyndns2
server=dynupdate.no-ip.com
login=$NOIPUSER
password=$NOIPPASS
$NOIPDOMAIN
DDCLIENTCONF

systemctl start ddclient
systemctl enable ddclient

echo "Finished!. Probably should reboot one more time."
