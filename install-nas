#!/bin/bash
# Arch install script for NAS with four disks, RAID-5

MYHOSTNAME=nas2
NODE=101
TIMEZONE=US/Central
INTERFACE=

myuser=wes
users=
password=

modprobe raid1
modprobe raid5
modprobe dm-mod

sgdisk -og /dev/sda 
sgdisk -n 1:2048:+100M -c 1:"Linux /boot" -t 1:fd00 /dev/sda
sgdisk -n 2 -c 2:"Linux /" -t 2:fd00 /dev/sda

sgdisk --backup=table /dev/sda
sgdisk --load-backup=table /dev/sdb
sgdisk --load-backup=table /dev/sdc
sgdisk --load-backup=table /dev/sdd

mdadm --create /dev/md0 --level=5 --raid-devices=4 /dev/sd[abcd]2
mdadm --create /dev/md1 --level=1 --raid-devices=4 --metadata=1.0 /dev/sd[abcd]1

pvcreate /dev/md0
vgcreate VolGroupArray /dev/md0
lvcreate -L 20G VolGroupArray -n lvroot
lvcreate -L 15G VolGroupArray -n lvvar
lvcreate -l +100%FREE VolGroupArray -n lvhome

mkfs.ext4 /dev/VolGroupArray/lvroot
mkfs.ext4 /dev/VolGroupArray/lvvar
mkfs.ext4 /dev/VolGroupArray/lvhome
mkfs.ext4 /dev/md1

mount /dev/VolGroupArray/lvroot /mnt
mkdir -p /mnt/boot
mount /dev/md1 /mnt/boot
mkdir -p /mnt/home
mount /dev/VolGroupArray/lvhome /mnt/home
mkdir -p /mnt/var
mount /dev/VolGroupArray/lvvar /mnt/var

echo "Installing base system..."
pacstrap /mnt base base-devel syslinux nfs-utils wget vim openssh mlocate zsh pkgfile intel-ucode gptfdisk

# Make sure disks are automounted
echo "Generating fstab..."
genfstab -U -p /mnt >> /mnt/etc/fstab

# Set language
echo "Setting locale..."
sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /mnt/etc/locale.gen
arch-chroot /mnt locale-gen
echo LANG=en_US.UTF-8 > /mnt/etc/locale.conf

# Set time zone
echo "Setting time zone..."
ln -sf /usr/share/zoneinfo/$TIMEZONE /mnt/etc/localtime
arch-chroot /mnt hwclock --systohc --utc

# Set hostname
echo "Setting hostname..."
echo $MYHOSTNAME > /mnt/etc/hostname

# Enable networking
echo "Enabling internal network interface..."
arch-chroot /mnt systemctl enable systemd-networkd.service
arch-chroot /mnt systemctl enable systemd-resolved.service

cat - > /mnt/etc/systemd/network/wired.network <<NETCONFIG
[Match]
Name=$INTERFACE

[Address]
Address=192.168.0.$NODE

[Route]
Gateway=192.168.0.1

NETCONFIG

echo "Updating hosts..."
cat -> /mnt/etc/hosts <<HOSTS 
192.168.0.1	master
192.168.0.2	node2
192.168.0.3	node3
192.168.0.4	node4
192.168.0.5	node5
192.168.0.6	node6
192.168.0.7	node7
192.168.0.8	node8
192.168.0.9	node9
192.168.0.10	node10
192.168.0.11	node11
192.168.0.12	node12
192.168.0.100	nas1
HOSTS

# Create ramdisk environment
echo "Creating initial ramdisk..."
arch-chroot /mnt mkinitcpio -p linux

# Set root password
echo "Create root password..."
arch-chroot /mnt passwd

echo "Creating home directory export..."
mkdir -p /mnt/srv/nfs4/home

echo "/home /srv/nfs4/home  none   bind   0   0" >> /mnt/etc/fstab

echo "/srv/nfs4/ 192.168.0.0/24(rw,fsid=root,no_subtree_check)" >> /mnt/etc/exports
echo "/srv/nfs4/home 192.168.0.0/24(rw,no_subtree_check,nohide)" >> /mnt/etc/exports

arch-chroot /mnt exportfs -rav

arch-chroot /mnt systemctl enable rpcbind.service
arch-chroot /mnt systemctl enable nfs-server.service

echo "master:/srv/nfs4/pacmancache /var/cache/pacman/pkg nfs noauto,noatime,rsize=32768,wsize=32768 0 0" >> /mnt/etc/fstab

arch-chroot /mnt updatedb
arch-chroot /mnt pkgfile --update

echo "Setting up sudoers..."
cat -> /mnt/etc/sudoers <<SUDOFILE
## sudoers file.
##
## This file MUST be edited with the 'visudo' command as root.
## Failure to use 'visudo' may result in syntax or file permission errors
## that prevent sudo from running.
##
## See the sudoers man page for the details on how to write a sudoers file.
##

Cmnd_Alias  POWER    = /sbin/halt, /sbin/reboot, /sbin/poweroff, /usr/bin/shutdown
Cmnd_Alias  KILL     = /usr/bin/kill, /usr/bin/killall
Cmnd_Alias  STORAGE  = /usr/bin/mount, /usr/bin/umount
Cmnd_Alias  SYSTEMD  = /usr/bin/journalctl, /usr/bin/systemctl
Cmnd_Alias  PKGMAN   = /usr/bin/pacman, /usr/bin/pkgfile
Cmnd_Alias  FIREWALL = /usr/bin/iptables, /usr/bin/ip6tables
Cmnd_Alias  USERS    = /usr/bin/useradd, /usr/bin/usermod, /usr/bin/groupadd, /user/bin/groupdel

root ALL=(ALL) ALL
wes ALL=(ALL) ALL
%admin ALL=(root) POWER, STORAGE, KILL, SYSTEMD, PKGMAN, FIREWALL, USERS
%wheel ALL=(root) POWER, STORAGE, KILL
## (the '#' here does not indicate a comment)
#includedir /etc/sudoers.d
SUDOFILE

echo "Changing root shell to zsh..."
arch-chroot /mnt chsh -s /usr/bin/zsh

echo "Adding personal user..."
arch-chroot /mnt useradd -m -G wheel -s /bin/zsh $myuser
arch-chroot /mnt groupadd admin
arch-chroot /mnt usermod -aG admin $myuser
echo "Enter your user password..."
arch-chroot /mnt passwd $myuser

# Add users and configure them
echo "Adding other users..."

for user in $users; do
    echo "Adding $user..."
	arch-chroot /mnt useradd -m -G wheel -s /bin/bash $user
	echo $user:$password | arch-chroot /mnt chpasswd
	arch-chroot /mnt chage -d 0 $user
done

cat - > /mnt/etc/ssh/sshd_config <<SSHCONFIG
#	$OpenBSD: sshd_config,v 1.94 2015/02/02 01:57:44 deraadt Exp $

# This is the sshd server system-wide configuration file.  See
# sshd_config(5) for more information.

# This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options override the
# default value.

#Port 22
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::

# The default requires explicit activation of protocol 1
#Protocol 2

# HostKey for protocol version 1
#HostKey /etc/ssh/ssh_host_key
# HostKeys for protocol version 2
#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_dsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key

# Lifetime and size of ephemeral version 1 server key
#KeyRegenerationInterval 1h
#ServerKeyBits 1024

# Ciphers and keying
#RekeyLimit default none

# Logging
# obsoletes QuietMode and FascistLogging
#SyslogFacility AUTH
#LogLevel INFO

# Authentication:

#LoginGraceTime 2m
#PermitRootLogin yes
#StrictModes yes
#MaxAuthTries 6
#MaxSessions 10

#RSAAuthentication yes
#PubkeyAuthentication yes

# The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
# but this is overridden so installations will only check .ssh/authorized_keys
AuthorizedKeysFile	.ssh/authorized_keys

#AuthorizedPrincipalsFile none

#AuthorizedKeysCommand none
#AuthorizedKeysCommandUser nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
#RhostsRSAAuthentication no
# similar for protocol version 2
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# RhostsRSAAuthentication and HostbasedAuthentication
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
#IgnoreRhosts yes

# To disable tunneled clear text passwords, change to no here!
#PasswordAuthentication yes
#PermitEmptyPasswords no

# Change to no to disable s/key passwords
ChallengeResponseAuthentication no

# Kerberos options
#KerberosAuthentication no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes
#KerberosGetAFSToken no

# GSSAPI options
#GSSAPIAuthentication no
#GSSAPICleanupCredentials yes

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
# the setting of "PermitRootLogin without-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to 'no'.
UsePAM yes

#AllowAgentForwarding yes
AllowTcpForwarding yes
#GatewayPorts no
X11Forwarding yes
X11DisplayOffset 10
X11UseLocalhost yes
#PermitTTY yes
PrintMotd no # pam does that
#PrintLastLog yes
#TCPKeepAlive yes
#UseLogin no
UsePrivilegeSeparation sandbox		# Default for new installations.
#PermitUserEnvironment no
#Compression delayed
#ClientAliveInterval 0
#ClientAliveCountMax 3
#UseDNS no
#PidFile /run/sshd.pid
#MaxStartups 10:30:100
#PermitTunnel no
#ChrootDirectory none
#VersionAddendum none

# no default banner path
#Banner none

# override default of no subsystems
Subsystem	sftp	/usr/lib/ssh/sftp-server

# Example of overriding settings on a per-user basis
#Match User anoncvs
#	X11Forwarding no
#	AllowTcpForwarding no
#	PermitTTY no
#	ForceCommand cvs server

SSHCONFIG

arch-chroot /mnt systemctl enable sshd

# Add automatic timeout for virtual consoles (not terminal emulators)
cat -> /mnt/etc/profile.d/shell-timeout.sh <<TMOUTSETUP
TMOUT="\$(( 60*10 ))";
[ -z "\$DISPLAY" ] && export TMOUT;
case \$( /usr/bin/tty ) in
        /dev/tty[0-9]*) export TMOUT;;
esac
TMOUTSETUP

cat -> /mnt/firstboot <<FIRSTBOOT
timedatectl set-ntp true
rm /etc/resolv.conf
echo "nameserver 192.168.0.1 > /etc/resolv.conf"
systemctl disable firstboot.service
rm -f /etc/systemd/system/firstboot.service
rm -f /firstboot
FIRSTBOOT

echo "Generating first-boot service... "
cat -> /mnt/etc/systemd/system/firstboot.service <<FIRSTBOOTSERV
[Unit]
Description=Configuration script for first boot of system
After=basic.target

[Service]
Type=oneshot
User=root
ExecStart=/bin/bash /firstboot

[Install]
WantedBy=basic.target
FIRSTBOOTSERV

arch-chroot /mnt systemctl enable firstboot.service

ROOTUUID=$(lsblk -f | awk '/lvroot/ && !seen {print $3;seen=1}')

arch-chroot /mnt syslinux-install_update -i -a -m

cat -> /mnt/boot/syslinux/syslinux.cfg <<SYSLINUX
PROMPT 0
DEFAULT arch
TIMEOUT 0

LABEL arch
    MENU LABEL Arch Linux
    LINUX ../vmlinuz-linux
    APPEND root=UUID=$ROOTUUID rw
    INITRD ../intel-ucode.img,../initramfs-linux.img

LABEL archfallback
    MENU LABEL Arch Linux Fallback
    LINUX ../vmlinuz-linux
    APPEND root=UUID=$ROOTUUID rw
    INITRD ../intel-ucode.img,../initramfs-linux.img

SYSLINUX
