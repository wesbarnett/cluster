#!/bin/bash
# Arch install script for cluster

INTERFACE=eno1      # internal
EXTINTERFACE=enp3s2 # external (on master)

TIMEZONE=US/Central

myuser=wes
users=
password=


PACSTRAP="base base-devel nfs-utils wget grub vim openssh mlocate xorg-server xorg-xauth pkgfile iptables sshguard intel-ucode"

echo "Which type of machine are you installing on?"
select TYPE in master node; do
    if [[ "$REPLY"  = 1 ]]; then
        ROOT=40G
        MYHOSTNAME=master
        break
    elif [[ "$REPLY" = 2 ]]; then
        echo "Which node are you installing (give the number)?"
        read NODE
        BOOT=200M
        ROOT=20G
        MYHOSTNAME=node$NODE
        break
    fi
done

echo "Partitioning /dev/sda..."
sgdisk -og /dev/sda 
sgdisk -n 1:2048:+$BOOT -c 1:"Linux /boot" -t 1:8300 /dev/sda
sgdisk -n 2:+0M:+$ROOT -c 2:"Linux /" -t 2:8300 /dev/sda
sgdisk -n 3 -c 3:"Linux /home" -t 3:8300 /dev/sda
sgdisk -n 4 -c 4:"BIOS boot partition" -t 4:ef02 /dev/sda

echo "Creating filesystems..."
mkfs.ext4 /dev/sda1
mkfs.ext4 /dev/sda2
mkfs.ext4 /dev/sda3

echo "Mounting partitions..."
mount /dev/sda2 /mnt
mkdir -p /mnt/boot
mount /dev/sda1 /mnt/boot
mkdir -p /mnt/home
mount /dev/sda3 /mnt/home

echo "Installing base system..."
pacstrap /mnt $PACSTRAP

echo "Generating fstab..."
genfstab -U -p /mnt >> /mnt/etc/fstab

echo "Setting locale..."
sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /mnt/etc/locale.gen
arch-chroot /mnt locale-gen
echo LANG=en_US.UTF-8 > /mnt/etc/locale.conf

echo "Setting time zone..."
ln -sf /usr/share/zoneinfo/$TIMEZONE /mnt/etc/localtime
arch-chroot /mnt wclock --systohc --utc

echo "Setting hostname..."
echo $MYHOSTNAME > /mnt/etc/hostname

echo "Enabling internal network interface..."
arch-chroot /mnt systemctl enable systemd-networkd.service
arch-chroot /mnt systemctl enable systemd-resolved.service

if [ "$MASTER" = true ]; then

cat - > /mnt/etc/systemd/network/external.network <<NETCONFIG
[Match]
Name=$EXTINTERFACE

[Network]
DHCP=ipv4
IPForward=yes
NETCONFIG

cat - > /mnt/etc/systemd/network/wired.network <<NETCONFIG
[Match]
Name=$INTERFACE

[Network]
IPForward=yes
IPMasquerade=yes

[Address]
Address=192.168.0.$NODE

[Route]
Gateway=192.168.0.1
NETCONFIG

else

cat - > /mnt/systemd/network/wired.network <<NETCONFIG
[Match]
Name=$INTERFACE

[Address]
Address=192.168.0.$NODE

[Route]
Gateway=192.168.0.1

NETCONFIG

fi

echo "Updating hosts..."
cat ->> /mnt/etc/hosts <<HOSTS 
192.168.0.1 master
192.168.0.2 node2
192.168.0.3 node3
192.168.0.4 node4
192.168.0.5 node5
192.168.0.6 node6
192.168.0.7 node7
192.168.0.8 node8
192.168.0.9 node9
192.168.0.10    node10
192.168.0.11    node11
192.168.0.12    node12
HOSTS

echo "Creating initial ramdisk..."
arch-chroot /mnt mkinitcpio -p linux

echo "Create root password..."
arch-chroot /mnt passwd

echo "Installing bootloader..."
arch-chroot /mnt grub-install --target=i386-pc --recheck /dev/sda
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

# Create pacman cache share
if [ "$MASTER" = true ]; then
    echo "Creating shared pacman cache..."
    mkdir -p /mnt/srv/nfs4/pacmancache
    echo "/var/cache/pacman/pkg /srv/nfs4/pacmancache  none   bind   0   0" >> /mnt/etc/fstab
    echo "/srv/nfs4/ 192.168.0.0/24(rw,fsid=root,no_subtree_check)" >> /mnt/etc/exports
    echo "/srv/nfs4/pacmancache 192.168.0.0/24(rw,no_subtree_check,nohide)" >> /mnt/etc/exports
    arch-chroot /mnt exportfs -rav
    arch-chroot /mnt systemctl enable rpcbind.service
    arch-chroot /mnt systemctl enable nfs-server.service
else
    echo "Creating home directory export..."
    mkdir -p /mnt/srv/nfs4/home
    echo "/home /srv/nfs4/home  none   bind   0   0" >> /mnt/etc/fstab
    echo "/srv/nfs4/ 192.168.0.0/24(rw,fsid=root,no_subtree_check)" >> /mnt/etc/exports
    echo "/srv/nfs4/home 192.168.0.0/24(rw,no_subtree_check,nohide)" >> /mnt/etc/exports
    arch-chroot /mnt exportfs -rav
    arch-chroot /mnt systemctl enable rpcbind.service
    arch-chroot /mnt systemctl enable nfs-server.service
    echo "master:/srv/nfs4/pacmancache /var/cache/pacman/pkg nfs noauto,noatime,rsize=32768,wsize=32768 0 0" >> /mnt/etc/fstab
fi

arch-chroot /mnt updatedb
arch-chroot pkgfile --update

echo "Setting up sudoers..."
sed -i 's/#%wheel/%wheel/g' /mnt/etc/sudoers

echo "Adding personal user..."
arch-chroot /mnt useradd -m -G wheel -s /bin/bash $myuser
arch-chroot /mnt groupadd admin
arch-chroot /mnt usermod -aG admin $myuser

echo "Enter your user password..."
arch-chroot /mnt passwd $myuser

# Add users and configure them
echo "Adding other users..."

for user in $users; do
    echo "Adding $user..."
    arch-chroot /mnt useradd -m -G wheel -s /bin/bash $user
    echo $user:$password | arch-chroot /mnt chpasswd
    arch-chroot /mnt chage -d 0 $user
done

echo "Setting up firewall and sshguard..."

if [ "$MASTER" = true ]; then

    echo "net.ipv4.ip_forward=1" >> /mnt/etc/systctl.d/99-sysctl.conf
    echo "IPTABLES_FORWARD=1" >> /mnt/etc/conf.d/iptables


cat - > /mnt/etc/iptables/iptables.rules <<RULES
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
:sshguard - [0:0]
-A INPUT -p tcp -m comment --comment "000 send ssh traffic to sshguard" -j sshguard
-A INPUT -m comment --comment "001 accept established traffic" -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -m comment --comment "002 accept loopback device" -j ACCEPT
-A INPUT -i $INTERFACE -m comment --comment "003 accept traffic on trusted interface (within cluster)" -j ACCEPT
-A INPUT -m comment --comment "004 drop traffic with invalid headers or checksums" -m conntrack --ctstate INVALID -j DROP
-A INPUT -p icmp -m comment --comment "005 accept all echo requests" -m conntrack --ctstate NEW -m icmp --icmp-type 8 -j ACCEPT
-A INPUT -p tcp -m multiport --dports 22 -m comment --comment "006 accept ssh traffic" -j ACCEPT
-A INPUT -p udp -m comment --comment "007 if port is not open, reject" -j REJECT --reject-with icmp-port-unreachable
-A INPUT -p tcp -m comment --comment "008 reject tcp-reset packets" -j REJECT --reject-with tcp-reset
-A INPUT -m comment --comment "009 reject all other traffic with unreachable message" -j REJECT --reject-with icmp-proto-unreachable
-A INPUT -m comment --comment "998 drop all INPUT by default" -j DROP
-A FORWARD -m comment --comment "010 established forwarded traffic is allowed" -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -p icmp -m comment --comment "011 accept all forwared icmp traffic" -j ACCEPT
-A FORWARD -i lo -m comment --comment "012 accept all forwarded loopback traffic" -j ACCEPT
-A FORWARD -i $INTERFACE -o $EXTINTERFACE -m comment --comment "013 accept all traffic from cluster to outside" -j ACCEPT
-A FORWARD -m comment --comment "014 reject all traffic with unreachable message" -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -m comment --comment "999 drop all FORWARD by default" -j DROP
COMMIT
*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
-A POSTROUTING -s 192.168.0.0/24 -o $EXTINTERFACE -m comment --comment "015 masquerade all cluster traffic as coming from master" -j MASQUERADE
COMMIT
RULES

    arch-chroot /mnt touch /etc/iptables/ip6tables.rules
    arch-chroot /mnt systemctl enable iptables.service
    arch-chroot /mnt systemctl enable sshguard.service

    echo "Setting up ssh..."
    sed -i -e 's/#Protocol 2/Protocol 2/g' \ 
           -e 's/#LoginGraceTime 2m/LoginGraceTime 30s/g' \
           -e 's/#PermitRootLogin prohibit-password/PermitRootLogin no/g' \
           -e 's/#AllowTcpForwarding yes/AllowTcpForwarding yes/g' \
    /etc/ssh/sshd_config

fi

arch-chroot /mnt systemctl enable sshd

# Add automatic timeout for virtual consoles (not terminal emulators)
cat -> /mnt/etc/profile.d/shell-timeout.sh <<TMOUTSETUP
TMOUT="\$(( 60*10 ))";
[ -z "\$DISPLAY" ] && export TMOUT;
case \$( /usr/bin/tty ) in
        /dev/tty[0-9]*) export TMOUT;;
esac
TMOUTSETUP

echo "Creating first boot script..."

if [ "$MASTER" = true ]; then

cat -> /mnt/firstboot <<FIRSTBOOT
#!/bin/bash
timedatectl set-ntp true
ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf
systemctl disable firstboot.service
rm -f /etc/systemd/system/firstboot.service
rm -f /firstboot
FIRSTBOOT

else

cat -> /mnt/firstboot <<FIRSTBOOT
timedatectl set-ntp true
rm /etc/resolv.conf
echo "nameserver 192.168.0.1 > /etc/resolv.conf"
systemctl disable firstboot.service
rm -f /etc/systemd/system/firstboot.service
rm -f /firstboot
FIRSTBOOT

fi

echo "Generating first-boot service... "
cat -> /mnt/etc/systemd/system/firstboot.service <<FIRSTBOOTSERV
[Unit]
Description=Configuration script for first boot of system
After=basic.target

[Service]
Type=oneshot
User=root
ExecStart=/bin/bash /firstboot

[Install]
WantedBy=basic.target
FIRSTBOOTSERV

arch-chroot /mnt systemctl enable firstboot.service
