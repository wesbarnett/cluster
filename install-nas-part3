#!/bin/bash

set -e

users=USER1 USER2 USER3 # users to add
myuser=wes

##########################################

# Install some things we need
pacman -q -S --noconfirm vim openssh mlocate zsh pkgfile

# Update locate database
updatedb

# Update pkgfile database
pkgfile --update

# Allow all users in wheel group to shutdown system, mount drives, and kill process
# Admin users can do the above, plus systemd, pacman, and firewall

echo "Enabling wheel group in sudoers..."
cat -> /etc/sudoers <<SUDOFILE
## sudoers file.
##
## This file MUST be edited with the 'visudo' command as root.
## Failure to use 'visudo' may result in syntax or file permission errors
## that prevent sudo from running.
##
## See the sudoers man page for the details on how to write a sudoers file.
##

Cmnd_Alias  POWER    = /sbin/halt, /sbin/reboot, /sbin/poweroff, /usr/bin/shutdown
Cmnd_Alias  KILL     = /usr/bin/kill, /usr/bin/killall
Cmnd_Alias  STORAGE  = /usr/bin/mount, /usr/bin/umount
Cmnd_Alias  SYSTEMD  = /usr/bin/journalctl, /usr/bin/systemctl
Cmnd_Alias  PKGMAN   = /usr/bin/pacman, /usr/bin/pkgfile
Cmnd_Alias  FIREWALL = /usr/bin/iptables, /usr/bin/ip6tables
Cmnd_Alias  USERS    = /usr/bin/useradd, /usr/bin/usermod, /usr/bin/groupadd, /user/bin/groupdel

root ALL=(ALL) ALL
%admin ALL=(root) POWER, STORAGE, KILL, SYSTEMD, PKGMAN, FIREWALL, USERS
%wheel ALL=(root) POWER, STORAGE, KILL

## (the '#' here does not indicate a comment)
#includedir /etc/sudoers.d
SUDOFILE


echo "Changing root shell to zsh..."
chsh -s /usr/bin/zsh

echo "Adding personal user..."
useradd -m -G wheel -s /bin/zsh $myuser
groupadd admin
usermod -aG admin $myuser
echo "Enter your user password..."
passwd $myuser

# Add users and configure them
echo "Adding other users..."

for user in $users; do
    echo "Adding $user..."
	useradd -m -G wheel -s /bin/bash $user
done

# Enable ssh
systemctl enable sshd

echo "Pointing to master node for DNS..."

rm /etc/resolv.conf
echo "nameserver 192.168.0.1 > /etc/resolv.conf"

systemctl restart systemd-networkd
systemctl restart systemd-resolved

# Sync time
timedatectl set-ntp true 

# Update microcode
echo "Getting updated Intel microcode..."
pacman -S intel-ucode

# Add automatic timeout for virtual consoles (not terminal emulators)
cat -> /etc/profile.d/shell-timeout.sh <<TMOUTSETUP
TMOUT="\$(( 60*10 ))";
[ -z "\$DISPLAY" ] && export TMOUT;
case \$( /usr/bin/tty ) in
        /dev/tty[0-9]*) export TMOUT;;
esac
TMOUTSETUP

echo "Finished!. Probably should reboot one more time."
